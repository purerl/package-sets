// This file was generated by purescript-docs-search.
window.DocsSearchIndex["5"] = [["label",[{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/erl-opentelemetry/v0.0.1/src/Metrics.purs","end":[48,34]},"score":0,"packageInfo":{"values":["erl-opentelemetry"],"tag":"Package"},"name":"Label","moduleName":"OpenTelemetry.Metrics","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Tuple"],"Tuple2"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[50,1],"name":".spago/erl-opentelemetry/v0.0.1/src/Metrics.purs","end":[50,35]},"score":0,"packageInfo":{"values":["erl-opentelemetry"],"tag":"Package"},"name":"label","moduleName":"OpenTelemetry.Metrics","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["OpenTelemetry","Metrics"],"Label"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lacks",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Lacks","moduleName":"Prim.Row","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["label",{"tag":"TypeConstructor","contents":[["Prim"],"Symbol"]}],["row",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"tag":"TypeVar","contents":"k"}]}]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The Lacks type class asserts that a label does not occur in a given row.\n"}],"tag":"SearchResult"}]],["languagedef",[{"values":[{"sourceSpan":{"start":[74,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Token.purs","end":[74,50]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"LanguageDef","moduleName":"Text.Parsing.Parser.Token","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser","Token"],"GenLanguageDef"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[80,5],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Token.purs","end":[112,6]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"LanguageDef","moduleName":"Text.Parsing.Parser.Token","info":{"values":[{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["commentStart",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["commentEnd",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["commentLine",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["nestedComments",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["identStart",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"RCons","contents":["identLetter",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"RCons","contents":["opStart",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"RCons","contents":["opLetter",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"RCons","contents":["reservedNames",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["reservedOpNames",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["caseSensitive",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]}]}]}]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["languagesprovidedhandler",[{"values":[{"sourceSpan":{"start":[106,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Handlers/Rest.purs","end":[106,62]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"LanguagesProvidedHandler","moduleName":"Erl.Cowboy.Handlers.Rest","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Handlers","Rest"],"RestHandler"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"TypeVar","contents":"s"}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"Handler for _ callback\n"}],"tag":"SearchResult"}]],["last",[{"values":[{"sourceSpan":{"start":[244,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[244,39]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"last","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/Partial.purs","end":[28,42]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"last","moduleName":"Data.Array.Partial","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element of a non-empty array.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[313,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[313,37]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"last","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in an array, or `Nothing` if the array is empty\n\nRunning time: `O(1)`.\n\n```purescript\nlast [1, 2] = Just 2\nlast [] = Nothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[361,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree.purs","end":[361,74]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"last","moduleName":"Data.FingerTree","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["v",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"v"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Sequence","Internal"],"Measured"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree"],"FingerTree"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[60,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[60,38]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[257,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[257,22]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[152,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[152,38]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/lists/v6.0.1/src/Data/List/Partial.purs","end":[21,41]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.Partial","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element of a non-empty list.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[241,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[241,22]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/maybe/v5.0.0/src/Data/Maybe/Last.purs","end":[21,32]},"score":31,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"Last","moduleName":"Data.Maybe.Last","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"Monoid returning the last (right-most) non-`Nothing` value.\n\n``` purescript\nLast (Just x) <> Last (Just y) == Last (Just y)\nLast (Just x) <> Last Nothing == Last (Just x)\nLast Nothing <> Last Nothing == Last Nothing\nmempty :: Last _ == Last Nothing\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,16],"name":".spago/maybe/v5.0.0/src/Data/Maybe/Last.purs","end":[21,32]},"score":31,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"Last","moduleName":"Data.Maybe.Last","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[13,1],"name":".spago/prelude/v5.0.1-erl1/src/Data/Semigroup/Last.purs","end":[13,24]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Last","moduleName":"Data.Semigroup.Last","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"Semigroup where `append` always takes the second option.\n\n``` purescript\nLast x <> Last y == Last y\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[13,16],"name":".spago/prelude/v5.0.1-erl1/src/Data/Semigroup/Last.purs","end":[13,24]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Last","moduleName":"Data.Semigroup.Last","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[118,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/NonEmpty.purs","end":[118,29]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"last","moduleName":"Data.Sequence.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence","NonEmpty"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"O(1). Get the last element of a non-empty sequence.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[336,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence.purs","end":[336,35]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"last","moduleName":"Data.Sequence","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"O(1). Get the last element of a Seq. Equivalent to\n`\\seq -> index (length seq - 1) seq`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[146,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List/NonEmpty.purs","end":[146,38]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"last","moduleName":"Erl.Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[175,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List.purs","end":[175,36]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"last","moduleName":"Erl.Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"}]],["lastdayofmonth",[{"values":[{"sourceSpan":{"start":[126,1],"name":".spago/datetime/v5.0.2-erl1/src/Data/Date.purs","end":[126,39]},"score":1,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"lastDayOfMonth","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Year"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Month"]}]},{"tag":"TypeConstructor","contents":[["Data","Date","Component"],"Day"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the final day of a month and year, accounting for leap years.\n"}],"tag":"SearchResult"}]],["lastdigit",[{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree/Digit.purs","end":[89,36]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"lastDigit","moduleName":"Data.FingerTree.Digit","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree","Digit"],"Digit"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lastindexof",[{"values":[{"sourceSpan":{"start":[284,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/CodePoints.purs","end":[284,46]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the number of code points preceding the last match of the given\npattern in the string. Returns Nothing when no matches are found.\n\n```purescript\n>>> lastIndexOf (Pattern \"𝐀\") \"b 𝐀𝐀 c 𝐀\"\nJust 7\n>>> lastIndexOf (Pattern \"o\") \"b 𝐀𝐀 c 𝐀\"\nNothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[207,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/CodeUnits.purs","end":[207,46]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the index of the last occurrence of the pattern in the\ngiven string. Returns `Nothing` if there is no match.\n\n```purescript\nlastIndexOf (Pattern \"c\") \"abcdc\" == Just 4\nlastIndexOf (Pattern \"c\") \"aaa\" == Nothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/NonEmpty/CodePoints.purs","end":[87,54]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[155,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/NonEmpty/CodeUnits.purs","end":[155,54]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the index of the last occurrence of the pattern in the\ngiven string. Returns `Nothing` if there is no match.\n\n```purescript\nlastIndexOf (Pattern \"c\") (NonEmptyString \"abcdc\") == Just 4\nlastIndexOf (Pattern \"c\") (NonEmptyString \"aaa\") == Nothing\n```\n"}],"tag":"SearchResult"}]],["lastindexof'",[{"values":[{"sourceSpan":{"start":[310,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/CodePoints.purs","end":[310,54]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf'","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the number of code points preceding the first match of the given\npattern in the string. Pattern matches following the given index will be\nignored.\n\nGiving a negative index is equivalent to giving 0 and giving an index\ngreater than the number of code points in the string is equivalent to\nsearching in the whole string.\n\nReturns Nothing when no matches are found.\n\n```purescript\n>>> lastIndexOf' (Pattern \"𝐀\") (-1) \"b 𝐀𝐀 c 𝐀\"\nNothing\n>>> lastIndexOf' (Pattern \"𝐀\") 0 \"b 𝐀𝐀 c 𝐀\"\nNothing\n>>> lastIndexOf' (Pattern \"𝐀\") 5 \"b 𝐀𝐀 c 𝐀\"\nJust 3\n>>> lastIndexOf' (Pattern \"𝐀\") 8 \"b 𝐀𝐀 c 𝐀\"\nJust 7\n>>> lastIndexOf' (Pattern \"o\") 5 \"b 𝐀𝐀 c 𝐀\"\nNothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[235,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/CodeUnits.purs","end":[235,54]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf'","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the index of the last occurrence of the pattern in the\ngiven string, starting at the specified index and searching\nbackwards towards the beginning of the string.\n\nStarting at a negative index is equivalent to starting at 0 and\nstarting at an index greater than the string length is equivalent\nto searching in the whole string.\n\nReturns `Nothing` if there is no match.\n\n```purescript\nlastIndexOf' (Pattern \"a\") (-1) \"ababa\" == Just 0\nlastIndexOf' (Pattern \"a\") 1 \"ababa\" == Just 0\nlastIndexOf' (Pattern \"a\") 3 \"ababa\" == Just 2\nlastIndexOf' (Pattern \"a\") 4 \"ababa\" == Just 4\nlastIndexOf' (Pattern \"a\") 5 \"ababa\" == Just 4\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[90,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/NonEmpty/CodePoints.purs","end":[90,62]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf'","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[175,1],"name":".spago/strings/v5.0.0-erl2/src/Data/String/NonEmpty/CodeUnits.purs","end":[175,62]},"score":8,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"lastIndexOf'","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the index of the last occurrence of the pattern in the\ngiven string, starting at the specified index and searching\nbackwards towards the beginning of the string.\n\nStarting at a negative index is equivalent to starting at 0 and\nstarting at an index greater than the string length is equivalent\nto searching in the whole string.\n\nReturns `Nothing` if there is no match.\n\n```purescript\nlastIndexOf' (Pattern \"a\") (-1) (NonEmptyString \"ababa\") == Just 0\nlastIndexOf' (Pattern \"a\") 1 (NonEmptyString \"ababa\") == Just 0\nlastIndexOf' (Pattern \"a\") 3 (NonEmptyString \"ababa\") == Just 2\nlastIndexOf' (Pattern \"a\") 4 (NonEmptyString \"ababa\") == Just 4\nlastIndexOf' (Pattern \"a\") 5 (NonEmptyString \"ababa\") == Just 4\n```\n"}],"tag":"SearchResult"}]],["lastof",[{"values":[{"sourceSpan":{"start":[140,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Fold.purs","end":[140,64]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"lastOf","moduleName":"Data.Lens.Fold","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Fold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The last focus of a `Fold`, if there is any.\n"}],"tag":"SearchResult"}]],["latin1",[{"values":[{"sourceSpan":{"start":[172,3],"name":".spago/erl-kernel/v0.0.3/src/Erl/Kernel/File.purs","end":[172,11]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"Latin1","moduleName":"Erl.Kernel.File","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lazy",[{"values":[{"sourceSpan":{"start":[10,1],"name":".spago/control/v5.0.0-erl1/src/Control/Lazy.purs","end":[11,28]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Lazy","moduleName":"Control.Lazy","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["l",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Lazy` class represents types which allow evaluation of values\nto be _deferred_.\n\nUsually, this means that a type contains a function arrow which can\nbe used to delay evaluation.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/lazy/v5.0.0-erl1/src/Data/Lazy.purs","end":[34,41]},"score":6,"packageInfo":{"values":["lazy"],"tag":"Package"},"name":"Lazy","moduleName":"Data.Lazy","info":{"values":[{"typeArguments":[["t0",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"`Lazy a` represents lazily-computed values of type `a`.\n\nA lazy value is computed at most once - the result is saved\nafter the first computation, and subsequent attempts to read\nthe value simply return the saved value.\n\n`Lazy` values can be created with `defer`, or by using the provided\ntype class instances.\n\n`Lazy` values can be evaluated by using the `force` function.\n\npurerl note: Due to the nature of the BEAM platform Lazy values\nare not in fact lazy with the Erlang backend, but simple thunks, i.e.\nwill be recomputed each time they are required.\n"}],"tag":"SearchResult"}]],["lazyempty",[{"values":[{"sourceSpan":{"start":[122,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree.purs","end":[122,47]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"lazyEmpty","moduleName":"Data.FingerTree","info":{"values":[{"type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree"],"FingerTree"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeVar","contents":"a"}]}}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lazysplit",[{"values":[{"sourceSpan":{"start":[405,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree.purs","end":[405,59]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"LazySplit","moduleName":"Data.FingerTree","info":{"values":[{"typeArguments":[["f",null],["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[405,20],"name":".spago/sequences/v3.0.2/src/Data/FingerTree.purs","end":[405,31]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"LazySplit","moduleName":"Data.FingerTree","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}},{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["identity",[{"values":[{"sourceSpan":{"start":[18,3],"name":".spago/prelude/v5.0.1-erl1/src/Control/Category.purs","end":[18,30]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"identity","moduleName":"Control.Category","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Control","Category"],"Category"],"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Category"],"Category"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"t"}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[14,1],"name":".spago/identity/v5.0.0/src/Data/Identity.purs","end":[14,32]},"score":10,"packageInfo":{"values":["identity"],"tag":"Package"},"name":"Identity","moduleName":"Data.Identity","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[14,20],"name":".spago/identity/v5.0.0/src/Data/Identity.purs","end":[14,32]},"score":10,"packageInfo":{"values":["identity"],"tag":"Package"},"name":"Identity","moduleName":"Data.Identity","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["identityt",[{"values":[{"sourceSpan":{"start":[30,1],"name":".spago/transformers/v5.2.0/src/Control/Monad/Identity/Trans.purs","end":[30,40]},"score":10,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"IdentityT","moduleName":"Control.Monad.Identity.Trans","info":{"values":[{"typeArguments":[["m",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"The `IdentityT` monad transformer.\n\nThis monad acts like a placeholder for functions that take a monad\ntransformer as an argument, similar to `identity` for functions and\n`Identity` for monads.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[30,23],"name":".spago/transformers/v5.2.0/src/Control/Monad/Identity/Trans.purs","end":[30,40]},"score":10,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"IdentityT","moduleName":"Control.Monad.Identity.Trans","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["head",[{"values":[{"sourceSpan":{"start":[53,1],"name":".spago/free/v6.0.1/src/Control/Comonad/Cofree.purs","end":[53,36]},"score":0,"packageInfo":{"values":["free"],"tag":"Package"},"name":"head","moduleName":"Control.Comonad.Cofree","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Cofree"],"Cofree"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the label for a tree.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[200,1],"name":".spago/transformers/v5.2.0/src/Control/Monad/List/Trans.purs","end":[200,56]},"score":10,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"head","moduleName":"Control.Monad.List.Trans","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","List","Trans"],"ListT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Extract the first element of a list.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[241,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[241,39]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"head","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/Partial.purs","end":[16,42]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"head","moduleName":"Data.Array.Partial","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element of a non-empty array.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[301,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[301,37]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"head","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in an array, or `Nothing` if the array is empty\n\nRunning time: `O(1)`.\n\n```purescript\nhead [1, 2] = Just 1\nhead [] = Nothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[330,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree.purs","end":[330,74]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"head","moduleName":"Data.FingerTree","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["v",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"v"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Sequence","Internal"],"Measured"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree"],"FingerTree"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[57,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[57,38]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[251,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[251,22]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[149,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[149,38]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[9,1],"name":".spago/lists/v6.0.1/src/Data/List/Partial.purs","end":[9,41]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.Partial","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element of a non-empty list.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[234,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[234,22]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[112,1],"name":".spago/nonempty/v6.0.0/src/Data/NonEmpty.purs","end":[112,38]},"score":7,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"head","moduleName":"Data.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the 'first' element of a non-empty container.\n\n```purescript\nhead (1 :| [2, 3]) == 1\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[105,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/NonEmpty.purs","end":[105,29]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"head","moduleName":"Data.Sequence.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence","NonEmpty"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"O(1). Get the first element of a non-empty sequence. Equivalent to\n`index 0`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[322,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence.purs","end":[322,35]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"head","moduleName":"Data.Sequence","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"O(1). Get the first element of a Seq. Equivalent to `index 0`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[143,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List/NonEmpty.purs","end":[143,38]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"head","moduleName":"Erl.Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[169,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List.purs","end":[169,36]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"head","moduleName":"Erl.Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[523,1],"name":".spago/erl-gun/v0.0.2/src/Erl/Gun.purs","end":[523,57]},"score":0,"packageInfo":{"values":["erl-gun"],"tag":"Package"},"name":"head","moduleName":"Erl.Gun","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"ConnPid"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Data","Binary","IOData"],"IOData"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"Headers"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"StreamRef"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[168,3],"name":".spago/erl-stetson/v0.13.0/src/Stetson/Types.purs","end":[168,9]},"score":0,"packageInfo":{"values":["erl-stetson"],"tag":"Package"},"name":"HEAD","moduleName":"Stetson.Types","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["headdigit",[{"values":[{"sourceSpan":{"start":[83,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree/Digit.purs","end":[83,36]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"headDigit","moduleName":"Data.FingerTree.Digit","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree","Digit"],"Digit"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["header",[{"values":[{"sourceSpan":{"start":[114,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Req.purs","end":[114,40]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"header","moduleName":"Erl.Cowboy.Req","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Req"],"Req"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[336,1],"name":".spago/erl-gun/v0.0.2/src/Erl/Gun.purs","end":[337,25]},"score":0,"packageInfo":{"values":["erl-gun"],"tag":"Package"},"name":"Header","moduleName":"Erl.Gun","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Tuple"],"Tuple2"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["headers",[{"values":[{"sourceSpan":{"start":[64,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Req.purs","end":[65,22]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"Headers","moduleName":"Erl.Cowboy.Req","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[117,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Req.purs","end":[117,41]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"headers","moduleName":"Erl.Cowboy.Req","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Req"],"Req"]}]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Req"],"Headers"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[339,1],"name":".spago/erl-gun/v0.0.2/src/Erl/Gun.purs","end":[340,16]},"score":0,"packageInfo":{"values":["erl-gun"],"tag":"Package"},"name":"Headers","moduleName":"Erl.Gun","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"Header"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[586,1],"name":".spago/erl-gun/v0.0.2/src/Erl/Gun.purs","end":[586,70]},"score":0,"packageInfo":{"values":["erl-gun"],"tag":"Package"},"name":"headers","moduleName":"Erl.Gun","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"ConnPid"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"Method"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Data","Binary","IOData"],"IOData"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"Headers"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Erl","Gun"],"StreamRef"]}]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["hexadecimal",[{"values":[{"sourceSpan":{"start":[179,1],"name":".spago/integers/v5.0.0-erl1/src/Data/Int.purs","end":[179,21]},"score":10,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"hexadecimal","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The base-16 system.\n"}],"tag":"SearchResult"}]],["hexdigit",[{"values":[{"sourceSpan":{"start":[796,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Token.purs","end":[796,56]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"hexDigit","moduleName":"Text.Parsing.Parser.Token","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a hex digit.  Matches any char that satisfies `Data.CodePoint.Unicode.isHexDigit`.\n"}],"tag":"SearchResult"}]],["hexdigittoint",[{"values":[{"sourceSpan":{"start":[582,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode.purs","end":[582,40]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"hexDigitToInt","moduleName":"Data.CodePoint.Unicode","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert a single digit `Char` to the corresponding `Just Int` if its argument\nsatisfies `isHexDigit` (one of `0..9, A..F, a..f`). Anything else converts to `Nothing`\n\n```\n>>> import Data.Traversable\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['0','1','2','3','4','5','6','7','8','9']\n(Just [0,1,2,3,4,5,6,7,8,9])\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['a','b','c','d','e','f']\n(Just [10,11,12,13,14,15])\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['A','B','C','D','E','F']\n(Just [10,11,12,13,14,15])\n\n>>> hexDigitToInt (codePointFromChar 'G')\nNothing\n```\n"}],"tag":"SearchResult"}]],["hexspanid",[{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/erl-opentelemetry/v0.0.1/src/Tracing/Span.purs","end":[25,46]},"score":0,"packageInfo":{"values":["erl-opentelemetry"],"tag":"Package"},"name":"hexSpanId","moduleName":"OpenTelemetry.Tracing.Span","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["OpenTelemetry","Tracing"],"SpanCtx"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["hextet",[{"values":[{"sourceSpan":{"start":[74,1],"name":".spago/erl-kernel/v0.0.3/src/Erl/Types.purs","end":[75,15]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"Hextet","moduleName":"Erl.Types","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[75,3],"name":".spago/erl-kernel/v0.0.3/src/Erl/Types.purs","end":[75,15]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"Hextet","moduleName":"Erl.Types","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/erl-kernel/v0.0.3/src/Erl/Types.purs","end":[87,30]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"hextet","moduleName":"Erl.Types","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Erl","Types"],"Hextet"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["hextraceid",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/erl-opentelemetry/v0.0.1/src/Tracing/Span.purs","end":[23,47]},"score":0,"packageInfo":{"values":["erl-opentelemetry"],"tag":"Package"},"name":"hexTraceId","moduleName":"OpenTelemetry.Tracing.Span","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["OpenTelemetry","Tracing"],"SpanCtx"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["heytingalgebra",[{"values":[{"sourceSpan":{"start":[38,1],"name":".spago/prelude/v5.0.1-erl1/src/Data/HeytingAlgebra.purs","end":[44,16]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"HeytingAlgebra","moduleName":"Data.HeytingAlgebra","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `HeytingAlgebra` type class represents types that are bounded lattices with\nan implication operator such that the following laws hold:\n\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n- Identity:\n  - `a || ff = a`\n  - `a && tt = a`\n- Implication:\n  - ``a `implies` a = tt``\n  - ``a && (a `implies` b) = a && b``\n  - ``b && (a `implies` b) = b``\n  - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``\n- Complemented:\n  - ``not a = a `implies` ff``\n"}],"tag":"SearchResult"}]],["heytingalgebrarecord",[{"values":[{"sourceSpan":{"start":[112,1],"name":".spago/prelude/v5.0.1-erl1/src/Data/HeytingAlgebra.purs","end":[118,78]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"HeytingAlgebraRecord","moduleName":"Data.HeytingAlgebra","info":{"values":[{"superclasses":[],"fundeps":[[["rowlist"],["subrow"]]],"arguments":[["rowlist",null],["row",null],["subrow",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for records where all fields have `HeytingAlgebra` instances, used\nto implement the `HeytingAlgebra` instance for records.\n"}],"tag":"SearchResult"}]],["h323",[{"values":[{"sourceSpan":{"start":[104,1],"name":".spago/uri/v8.0.1/src/URI/Scheme/Common.purs","end":[104,14]},"score":0,"packageInfo":{"values":["uri"],"tag":"Package"},"name":"h323","moduleName":"URI.Scheme.Common","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["URI","Scheme"],"Scheme"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"H.323 ([RFC3508](https://tools.ietf.org/html/rfc3508))\n"}],"tag":"SearchResult"}]],["ehostdown",[{"values":[{"sourceSpan":{"start":[145,3],"name":".spago/erl-kernel/v0.0.3/src/Erl/Kernel/Inet.purs","end":[145,14]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"EHostdown","moduleName":"Erl.Kernel.Inet","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["ehostunreach",[{"values":[{"sourceSpan":{"start":[146,3],"name":".spago/erl-kernel/v0.0.3/src/Erl/Kernel/Inet.purs","end":[146,17]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"EHostunreach","moduleName":"Erl.Kernel.Inet","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dict",[{"values":[{"sourceSpan":{"start":[72,1],"name":".spago/uri/v8.0.1/src/URI/Scheme/Common.purs","end":[72,14]},"score":0,"packageInfo":{"values":["uri"],"tag":"Package"},"name":"dict","moduleName":"URI.Scheme.Common","info":{"values":[{"type":{"tag":"TypeConstructor","contents":[["URI","Scheme"],"Scheme"]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"dictionary service protocol ([RFC2229](https://tools.ietf.org/html/rfc2229))\n"}],"tag":"SearchResult"}]],["diff",[{"values":[{"sourceSpan":{"start":[114,1],"name":".spago/datetime/v5.0.2-erl1/src/Data/Date.purs","end":[114,50]},"score":1,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"diff","moduleName":"Data.Date","info":{"values":[{"type":{"tag":"ForAll","contents":["d",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Time","Duration"],"Duration"],"constraintArgs":[{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Calculates the difference between two dates, returning the result as a\nduration.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[68,1],"name":".spago/datetime/v5.0.2-erl1/src/Data/DateTime.purs","end":[68,58]},"score":1,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"diff","moduleName":"Data.DateTime","info":{"values":[{"type":{"tag":"ForAll","contents":["d",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Time","Duration"],"Duration"],"constraintArgs":[{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Calculates the difference between two date/time values, returning the\nresult as a duration.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[122,1],"name":".spago/datetime/v5.0.2-erl1/src/Data/Time.purs","end":[122,50]},"score":1,"packageInfo":{"values":["datetime"],"tag":"Package"},"name":"diff","moduleName":"Data.Time","info":{"values":[{"type":{"tag":"ForAll","contents":["d",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Time","Duration"],"Duration"],"constraintArgs":[{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Time"],"Time"]}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Calculates the difference between two times, returning the result as a\nduration.\n"}],"tag":"SearchResult"}]],["difference",[{"values":[{"sourceSpan":{"start":[492,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[492,78]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"difference","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[1128,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[1128,62]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"difference","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Delete the first occurrence of each element in the second array from the\nfirst array, creating a new array.\n\n```purescript\ndifference [2, 1] [2, 3] = [1]\n```\n\nRunning time: `O(n*m)`, where n is the length of the first array, and m is\nthe length of the second.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[669,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[669,59]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"difference","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Delete the first occurrence of each element in the second list from the first list.\n\nRunning time: `O(n^2)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[758,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[758,59]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"difference","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Delete the first occurrence of each element in the second list from the first list.\n\nRunning time: `O(n^2)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[667,1],"name":".spago/ordered-collections/v2.0.2-erl1/src/Data/Map/Internal.purs","end":[667,67]},"score":5,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"difference","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["w",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"w"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Difference of two maps. Return elements of the first map where\nthe keys do not exist in the second map.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[137,1],"name":".spago/ordered-collections/v2.0.2-erl1/src/Data/Set/NonEmpty.purs","end":[137,89]},"score":5,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"difference","moduleName":"Data.Set.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Form the set difference. `Nothing` if the first is a subset of the second.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[152,1],"name":".spago/ordered-collections/v2.0.2-erl1/src/Data/Set.purs","end":[152,57]},"score":5,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"difference","moduleName":"Data.Set","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Form the set difference\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[554,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List.purs","end":[554,59]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"difference","moduleName":"Erl.Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Delete the first occurrence of each element in the second list from the first list.\n\nRunning time: `O(n^2)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[101,1],"name":".spago/erl-maps/v0.5.0/src/Erl/Data/Map.purs","end":[101,73]},"score":0,"packageInfo":{"values":["erl-maps"],"tag":"Package"},"name":"difference","moduleName":"Erl.Data.Map","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["difference'",[{"values":[{"sourceSpan":{"start":[495,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[495,71]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"difference'","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["digit",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree/Digit.purs","end":[35,34]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"Digit","moduleName":"Data.FingerTree.Digit","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A Digit is just an array which has between one and four elements\n(inclusive). If a Digit has two or three elements, it is described as\n'safe'; otherwise, it is described as 'dangerous'.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[792,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Token.purs","end":[792,53]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"digit","moduleName":"Text.Parsing.Parser.Token","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a digit.  Matches any char that satisfies `Data.CodePoint.Unicode.isDecDigit`.\n"}],"tag":"SearchResult"}]],["digitlength",[{"values":[{"sourceSpan":{"start":[108,1],"name":".spago/sequences/v3.0.2/src/Data/FingerTree/Digit.purs","end":[108,40]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"digitLength","moduleName":"Data.FingerTree.Digit","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FingerTree","Digit"],"Digit"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["digittoint",[{"values":[{"sourceSpan":{"start":[635,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode.purs","end":[635,147]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"digitToInt","moduleName":"Data.CodePoint.Unicode","info":{"values":[{"type":{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","TypeError"],"Warn"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"'digitToInt' is deprecated, use 'decDigitToInt', 'hexDigitToInt', or 'octDigitToInt' instead"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dimap",[{"values":[{"sourceSpan":{"start":[23,3],"name":".spago/profunctor/v5.0.0/src/Data/Profunctor.purs","end":[23,66]},"score":6,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"dimap","moduleName":"Data.Profunctor","info":{"values":[{"typeClassArguments":[["p",null]],"typeClass":[["Data","Profunctor"],"Profunctor"],"type":{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dimapping",[{"values":[{"sourceSpan":{"start":[81,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Iso.purs","end":[87,45]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"dimapping","moduleName":"Data.Lens.Iso","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["ss",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["tt",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["aa",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["bb",{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["q",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"q"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"AnIso"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"AnIso"]},{"tag":"TypeVar","contents":"ss"}]},{"tag":"TypeVar","contents":"tt"}]},{"tag":"TypeVar","contents":"aa"}]},{"tag":"TypeVar","contents":"bb"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Iso"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"ss"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"q"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"tt"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"aa"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"q"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"bb"}]}}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dir",[{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Static.purs","end":[24,32]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"dir","moduleName":"Cowboy.Static","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Routes"],"Path"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[130,1],"name":".spago/pathy/v8.1.0-erl1/src/Pathy/Path.purs","end":[130,59]},"score":0,"packageInfo":{"values":["pathy"],"tag":"Package"},"name":"dir","moduleName":"Pathy.Path","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["proxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Name"],"IsName"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"proxy"},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a path which points to a relative directory of the specified name.\n\nInstead of accepting a runtime value, this function accepts a type-level\nstring via a proxy, to ensure the constructed name is not empty.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/pathy/v8.1.0-erl1/src/Pathy/Phantom.purs","end":[45,37]},"score":0,"packageInfo":{"values":["pathy"],"tag":"Package"},"name":"Dir","moduleName":"Pathy.Phantom","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"The phantom type of directories.\n"}],"tag":"SearchResult"}]],["dir'",[{"values":[{"sourceSpan":{"start":[134,1],"name":".spago/pathy/v8.1.0-erl1/src/Pathy/Path.purs","end":[134,33]},"score":0,"packageInfo":{"values":["pathy"],"tag":"Package"},"name":"dir'","moduleName":"Pathy.Path","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a path which points to a relative directory of the specified name.\n"}],"tag":"SearchResult"}]],["direction",[{"values":[{"sourceSpan":{"start":[40,1],"name":".spago/datetime-parsing/10c0a9aecc60a2a5e8cff35bebe45be4dacaa7f8/src/Data/DateTime/Parsing.purs","end":[41,23]},"score":0,"packageInfo":{"values":["datetime-parsing"],"tag":"Package"},"name":"Direction","moduleName":"Data.DateTime.Parsing","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["directory",[{"values":[{"sourceSpan":{"start":[47,3],"name":".spago/erl-file/v0.0.3/src/Erl/File.purs","end":[47,14]},"score":0,"packageInfo":{"values":["erl-file"],"tag":"Package"},"name":"Directory","moduleName":"Erl.File","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[246,1],"name":".spago/erl-kernel/v0.0.3/src/Erl/Kernel/File.purs","end":[247,21]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"Directory","moduleName":"Erl.Kernel.File","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[247,3],"name":".spago/erl-kernel/v0.0.3/src/Erl/Kernel/File.purs","end":[247,21]},"score":0,"packageInfo":{"values":["erl-kernel"],"tag":"Package"},"name":"Directory","moduleName":"Erl.Kernel.File","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dirorfile",[{"values":[{"sourceSpan":{"start":[42,1],"name":".spago/pathy/v8.1.0-erl1/src/Pathy/Phantom.purs","end":[42,15]},"score":0,"packageInfo":{"values":["pathy"],"tag":"Package"},"name":"DirOrFile","moduleName":"Pathy.Phantom","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"The kind for the directory/file phantom type.\n"}],"tag":"SearchResult"}]],["discard",[{"values":[{"sourceSpan":{"start":[101,1],"name":".spago/prelude/v5.0.1-erl1/src/Control/Bind.purs","end":[102,60]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Discard","moduleName":"Control.Bind","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for types whose values can safely be discarded\nin a `do` notation block.\n\nAn example is the `Unit` type, since there is only one\npossible value which can be returned.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[102,3],"name":".spago/prelude/v5.0.1-erl1/src/Control/Bind.purs","end":[102,60]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"discard","moduleName":"Control.Bind","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Control","Bind"],"Discard"],"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Bind"],"Discard"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["disj",[{"values":[{"sourceSpan":{"start":[43,3],"name":".spago/prelude/v5.0.1-erl1/src/Data/HeytingAlgebra.purs","end":[43,22]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"disj","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[15,1],"name":".spago/prelude/v5.0.1-erl1/src/Data/Monoid/Disj.purs","end":[15,24]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Disj","moduleName":"Data.Monoid.Disj","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"Monoid and semigroup for disjunction.\n\n``` purescript\nDisj x <> Disj y == Disj (x || y)\n(mempty :: Disj _) == Disj bottom\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[15,16],"name":".spago/prelude/v5.0.1-erl1/src/Data/Monoid/Disj.purs","end":[15,24]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Disj","moduleName":"Data.Monoid.Disj","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["disjmodifying",[{"values":[{"sourceSpan":{"start":[134,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Setter.purs","end":[134,96]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"disjModifying","moduleName":"Data.Lens.Setter","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","State","Class"],"MonadState"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Setter'"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["disjointunion",[{"values":[{"sourceSpan":{"start":[143,1],"name":".spago/record/v3.0.0-erl1/src/Record/Builder.purs","end":[148,37]},"score":6,"packageInfo":{"values":["record"],"tag":"Package"},"name":"disjointUnion","moduleName":"Record.Builder","info":{"values":[{"type":{"tag":"ForAll","contents":["r1",{"tag":"ForAll","contents":["r2",{"tag":"ForAll","contents":["r3",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Row"],"Union"],"constraintArgs":[{"tag":"TypeVar","contents":"r1"},{"tag":"TypeVar","contents":"r2"},{"tag":"TypeVar","contents":"r3"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Row"],"Nub"],"constraintArgs":[{"tag":"TypeVar","contents":"r3"},{"tag":"TypeVar","contents":"r3"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r1"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Record","Builder"],"Builder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r2"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r3"}]}}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Build by merging some disjoint set of fields from another record.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[199,1],"name":".spago/record/v3.0.0-erl1/src/Record.purs","end":[205,15]},"score":6,"packageInfo":{"values":["record"],"tag":"Package"},"name":"disjointUnion","moduleName":"Record","info":{"values":[{"type":{"tag":"ForAll","contents":["r1",{"tag":"ForAll","contents":["r2",{"tag":"ForAll","contents":["r3",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Row"],"Union"],"constraintArgs":[{"tag":"TypeVar","contents":"r1"},{"tag":"TypeVar","contents":"r2"},{"tag":"TypeVar","contents":"r3"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Row"],"Nub"],"constraintArgs":[{"tag":"TypeVar","contents":"r3"},{"tag":"TypeVar","contents":"r3"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r1"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r2"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r3"}]}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Merges two records where no labels overlap. This restriction exhibits\nbetter inference than `merge` when the resulting record type is known,\nbut one argument is not.\n\nFor example, hole `?help` is inferred to have type `{ b :: Int }` here:\n\n```purescript\ndisjointUnion { a: 5 } ?help :: { a :: Int, b :: Int }\n```\n"}],"tag":"SearchResult"}]],["disjover",[{"values":[{"sourceSpan":{"start":[100,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Setter.purs","end":[100,76]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"disjOver","moduleName":"Data.Lens.Setter","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Setter"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["disjrecord",[{"values":[{"sourceSpan":{"start":[116,3],"name":".spago/prelude/v5.0.1-erl1/src/Data/HeytingAlgebra.purs","end":[116,93]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"disjRecord","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["dispatch",[{"values":[{"sourceSpan":{"start":[29,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Routes.purs","end":[29,37]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"Dispatch","moduleName":"Erl.Cowboy.Routes","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[83,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy.purs","end":[83,35]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"dispatch","moduleName":"Erl.Cowboy","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Routes"],"Dispatch"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy"],"Env"]}]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy"],"Env"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["distribute",[{"values":[{"sourceSpan":{"start":[25,3],"name":".spago/distributive/v5.0.0/src/Data/Distributive.purs","end":[25,60]},"score":5,"packageInfo":{"values":["distributive"],"tag":"Package"},"name":"distribute","moduleName":"Data.Distributive","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Data","Distributive"],"Distributive"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Distributive"],"Distributive"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["distributedefault",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/distributive/v5.0.0/src/Data/Distributive.purs","end":[46,13]},"score":5,"packageInfo":{"values":["distributive"],"tag":"Package"},"name":"distributeDefault","moduleName":"Data.Distributive","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Distributive"],"Distributive"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A default implementation of `distribute`, based on `collect`.\n"}],"tag":"SearchResult"}]],["distributive",[{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/distributive/v5.0.0/src/Data/Distributive.purs","end":[26,69]},"score":5,"packageInfo":{"values":["distributive"],"tag":"Package"},"name":"Distributive","moduleName":"Data.Distributive","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Categorical dual of `Traversable`:\n\n- `distribute` is the dual of `sequence` - it zips an arbitrary collection\n  of containers.\n- `collect` is the dual of `traverse` - it traverses an arbitrary\n  collection of values.\n\nLaws:\n\n- `distribute = collect identity`\n- `distribute <<< distribute = identity`\n- `collect f = distribute <<< map f`\n- `map f = unwrap <<< collect (Identity <<< f)`\n- `map distribute <<< collect f = unwrap <<< collect (Compose <<< f)`\n"}],"tag":"SearchResult"}]],["div",[{"values":[{"sourceSpan":{"start":[65,3],"name":".spago/prelude/v5.0.1-erl1/src/Data/EuclideanRing.purs","end":[65,21]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"div","moduleName":"Data.EuclideanRing","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","EuclideanRing"],"EuclideanRing"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["divide",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/contravariant/v5.0.0/src/Data/Divide.purs","end":[24,64]},"score":1,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"Divide","moduleName":"Data.Divide","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"`Divide` is the contravariant analogue of `Apply`.\n\nFor example, to test equality of `Point`s, we can use the `Divide` instance\nfor `Equivalence`:\n\n```purescript\ntype Point = Tuple Int Int\n\npointEquiv :: Equivalence Point\npointEquiv = divided defaultEquivalence defaultEquivalence\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,3],"name":".spago/contravariant/v5.0.0/src/Data/Divide.purs","end":[24,64]},"score":1,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"divide","moduleName":"Data.Divide","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Data","Divide"],"Divide"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["divided",[{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/contravariant/v5.0.0/src/Data/Divide.purs","end":[45,65]},"score":1,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"divided","moduleName":"Data.Divide","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`divided = divide id`\n"}],"tag":"SearchResult"}]],["divisible",[{"values":[{"sourceSpan":{"start":[12,1],"name":".spago/contravariant/v5.0.0/src/Data/Divisible.purs","end":[13,27]},"score":1,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"Divisible","moduleName":"Data.Divisible","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"`Divisible` is the contravariant analogue of `Applicative`.\n"}],"tag":"SearchResult"}]],["divisionring",[{"values":[{"sourceSpan":{"start":[29,1],"name":".spago/prelude/v5.0.1-erl1/src/Data/DivisionRing.purs","end":[30,18]},"score":61,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"DivisionRing","moduleName":"Data.DivisionRing","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `DivisionRing` class is for non-zero rings in which every non-zero\nelement has a multiplicative inverse. Division rings are sometimes also\ncalled *skew fields*.\n\nInstances must satisfy the following laws in addition to the `Ring` laws:\n\n- Non-zero ring: `one /= zero`\n- Non-zero multiplicative inverse: `recip a * a = a * recip a = one` for\n  all non-zero `a`\n\nThe result of `recip zero` is left undefined; individual instances may\nchoose how to handle this case.\n\nIf a type has both `DivisionRing` and `CommutativeRing` instances, then\nit is a field and should have a `Field` instance.\n"}],"tag":"SearchResult"}]],["divmodifying",[{"values":[{"sourceSpan":{"start":[131,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Setter.purs","end":[131,94]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"divModifying","moduleName":"Data.Lens.Setter","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","State","Class"],"MonadState"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Setter'"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["divover",[{"values":[{"sourceSpan":{"start":[97,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Setter.purs","end":[97,74]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"divOver","moduleName":"Data.Lens.Setter","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Setter"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["c8",[{"values":[{"sourceSpan":{"start":[44,1],"name":".spago/functors/v4.1.1/src/Data/Functor/Coproduct/Nested.purs","end":[44,57]},"score":5,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"C8","moduleName":"Data.Functor.Coproduct.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct","Nested"],"C7"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["f",null],["g",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["ala",[{"values":[{"sourceSpan":{"start":[68,1],"name":".spago/newtype/v4.0.0/src/Data/Newtype.purs","end":[75,9]},"score":25,"packageInfo":{"values":["newtype"],"tag":"Package"},"name":"ala","moduleName":"Data.Newtype","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Coerce"],"Coercible"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"This combinator is for when you have a higher order function that you want\nto use in the context of some newtype - `foldMap` being a common example:\n\n``` purescript\nala Additive foldMap [1,2,3,4] -- 10\nala Multiplicative foldMap [1,2,3,4] -- 24\nala Conj foldMap [true, false] -- false\nala Disj foldMap [true, false] -- true\n```\n"}],"tag":"SearchResult"}]],["alaf",[{"values":[{"sourceSpan":{"start":[89,1],"name":".spago/newtype/v4.0.0/src/Data/Newtype.purs","end":[98,9]},"score":25,"packageInfo":{"values":["newtype"],"tag":"Package"},"name":"alaF","moduleName":"Data.Newtype","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Coerce"],"Coercible"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","Coerce"],"Coercible"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Similar to `ala` but useful for cases where you want to use an additional\nprojection with the higher order function:\n\n``` purescript\nalaF Additive foldMap String.length [\"hello\", \"world\"] -- 10\nalaF Multiplicative foldMap Math.abs [1.0, -2.0, 3.0, -4.0] -- 24.0\n```\n\nThe type admits other possibilities due to the polymorphic `Functor`\nconstraints, but the case described above works because ((->) a) is a\n`Functor`.\n"}],"tag":"SearchResult"}]],["alens",[{"values":[{"sourceSpan":{"start":[120,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Types.purs","end":[120,46]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"ALens","moduleName":"Data.Lens.Types","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Optic"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Internal","Shop"],"Shop"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]},"arguments":[["s",null],["t",null],["a",null],["b",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"A lens defined in terms of `Shop`, which can be used\nto avoid issues with impredicativity.\n"}],"tag":"SearchResult"}]],["alens'",[{"values":[{"sourceSpan":{"start":[121,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Types.purs","end":[121,32]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"ALens'","moduleName":"Data.Lens.Types","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"ALens"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},"arguments":[["s",null],["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["alert",[{"values":[{"sourceSpan":{"start":[142,1],"name":".spago/erl-logger/v0.0.3/src/Erl/Logger.purs","end":[142,104]},"score":0,"packageInfo":{"values":["erl-logger"],"tag":"Package"},"name":"alert","moduleName":"Logger","info":{"values":[{"type":{"tag":"ForAll","contents":["metadata",{"tag":"ForAll","contents":["report",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Logger"],"MinimalMetadata"]},{"tag":"TypeVar","contents":"metadata"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"report"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[54,15],"name":".spago/erl-logger/v0.0.3/src/Erl/Logger.purs","end":[54,22]},"score":0,"packageInfo":{"values":["erl-logger"],"tag":"Package"},"name":"Alert","moduleName":"Logger","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alert'",[{"values":[{"sourceSpan":{"start":[166,1],"name":".spago/erl-logger/v0.0.3/src/Erl/Logger.purs","end":[166,117]},"score":0,"packageInfo":{"values":["erl-logger"],"tag":"Package"},"name":"alert'","moduleName":"Logger","info":{"values":[{"type":{"tag":"ForAll","contents":["metadata",{"tag":"ForAll","contents":["report",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Logger"],"Location"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Logger"],"MinimalMetadata"]},{"tag":"TypeVar","contents":"metadata"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"report"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["align",[{"values":[{"sourceSpan":{"start":[27,1],"name":".spago/these/v5.0.0/src/Data/Align.purs","end":[28,63]},"score":1,"packageInfo":{"values":["these"],"tag":"Package"},"name":"Align","moduleName":"Data.Align","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Align` type class represents an operation similar to `Apply` with\nslightly different semantics. For example:\n\n```purescript\n> align identity (Just 1) Nothing :: These Int Int\nThis 1\n```\n\nInstances are required to satisfy the following laws:\n\n- Idempotency: `join (align identity) == map (join These)`\n- Commutativity `align identity x y == swap <$> align identity y x`\n- Associativity `align identity x (align identity y z) == assoc <$> align identity (align identity x y) z`\n- Functoriality `align identity (f <$> x) (g <$> y) ≡ bimap f g <$> align identity x y`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[28,3],"name":".spago/these/v5.0.0/src/Data/Align.purs","end":[28,63]},"score":1,"packageInfo":{"values":["these"],"tag":"Package"},"name":"align","moduleName":"Data.Align","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Data","Align"],"Align"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Align"],"Align"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alignable",[{"values":[{"sourceSpan":{"start":[67,1],"name":".spago/these/v5.0.0/src/Data/Align.purs","end":[68,23]},"score":1,"packageInfo":{"values":["these"],"tag":"Package"},"name":"Alignable","moduleName":"Data.Align","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Align"],"Align"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"`Alignable` adds an identity value for the `align` operation.\n\nInstances are required to satisfy the following laws:\n\n- Left Identity: `align identity nil x == fmap That x`\n- Right Identity: `align identity x nil ≡ fmap This x`\n"}],"tag":"SearchResult"}]],["aligned",[{"values":[{"sourceSpan":{"start":[58,1],"name":".spago/these/v5.0.0/src/Data/Align.purs","end":[58,64]},"score":1,"packageInfo":{"values":["these"],"tag":"Package"},"name":"aligned","moduleName":"Data.Align","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Align"],"Align"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convenience combinator for `align identity`.\n"}],"tag":"SearchResult"}]],["all",[{"values":[{"sourceSpan":{"start":[549,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[549,62]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"all","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[1229,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[1229,69]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"all","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns true if all the array elements satisfy the given predicate.\niterating the array only as necessary and stopping as soon as the predicate\nyields false.\n\n```purescript\nall (_ > 0) [] = True\nall (_ > 0) [1, 2, 3] = True\nall (_ > 0) [-1, -2, -3] = False\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[369,1],"name":".spago/foldable-traversable/v5.0.1-erl1/src/Data/Foldable.purs","end":[369,76]},"score":20,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"all","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`all f` is the same as `and <<< map f`; map a function over the structure,\nand then get the conjunction of the results.\n"}],"tag":"SearchResult"}]],["allchars",[{"values":[{"sourceSpan":{"start":[830,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[830,28]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allchars","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars1",[{"values":[{"sourceSpan":{"start":[833,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[833,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars1","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars10",[{"values":[{"sourceSpan":{"start":[2655,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[2655,30]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars10","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars11",[{"values":[{"sourceSpan":{"start":[3458,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[3458,30]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars11","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars12",[{"values":[{"sourceSpan":{"start":[4059,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[4059,30]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars12","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars2",[{"values":[{"sourceSpan":{"start":[1036,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[1036,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars2","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars3",[{"values":[{"sourceSpan":{"start":[1238,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[1238,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars3","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars4",[{"values":[{"sourceSpan":{"start":[1440,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[1440,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars4","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars5",[{"values":[{"sourceSpan":{"start":[1643,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[1643,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars5","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars6",[{"values":[{"sourceSpan":{"start":[1845,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[1845,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars6","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars7",[{"values":[{"sourceSpan":{"start":[2048,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[2048,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars7","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars8",[{"values":[{"sourceSpan":{"start":[2250,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[2250,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars8","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allchars9",[{"values":[{"sourceSpan":{"start":[2453,1],"name":".spago/unicode/v5.0.0-erl1/src/Data/CodePoint/Unicode/Internal.purs","end":[2453,29]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"allChars9","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","CodePoint","Unicode","Internal"],"CharBlock"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allof",[{"values":[{"sourceSpan":{"start":[100,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Fold.purs","end":[100,91]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"allOf","moduleName":"Data.Lens.Fold","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["r",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Fold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Whether all foci of a `Fold` satisfy a predicate.\n"}],"tag":"SearchResult"}]],["allow_missing_post",[{"values":[{"sourceSpan":{"start":[90,1],"name":".spago/erl-stetson/v0.13.0/src/Stetson/HandlerProxy.purs","end":[90,94]},"score":0,"packageInfo":{"values":["erl-stetson"],"tag":"Package"},"name":"allow_missing_post","moduleName":"Stetson.HandlerProxy","info":{"values":[{"type":{"tag":"ForAll","contents":["msg",{"tag":"ForAll","contents":["state",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Handlers","Rest"],"PreviouslyExistedHandler"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","HandlerProxy"],"State"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allowed_methods",[{"values":[{"sourceSpan":{"start":[75,1],"name":".spago/erl-stetson/v0.13.0/src/Stetson/HandlerProxy.purs","end":[75,88]},"score":0,"packageInfo":{"values":["erl-stetson"],"tag":"Package"},"name":"allowed_methods","moduleName":"Stetson.HandlerProxy","info":{"values":[{"type":{"tag":"ForAll","contents":["msg",{"tag":"ForAll","contents":["state",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Handlers","Rest"],"AllowedMethodsHandler"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","HandlerProxy"],"State"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["allowedmethods",[{"values":[{"sourceSpan":{"start":[44,1],"name":".spago/erl-stetson/v0.13.0/src/Stetson/Rest.purs","end":[44,154]},"score":0,"packageInfo":{"values":["erl-stetson"],"tag":"Package"},"name":"allowedMethods","moduleName":"Stetson.Rest","info":{"values":[{"type":{"tag":"ForAll","contents":["msg",{"tag":"ForAll","contents":["state",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Req"],"Req"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"RestResult"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Stetson","Types"],"HttpMethod"]}]}}]},{"tag":"TypeVar","contents":"state"}]}}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"StetsonHandler"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"StetsonHandler"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Add an allowedMethods callback to the provided StetsonHandler\n"}],"tag":"SearchResult"}]],["allowedmethodshandler",[{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Handlers/Rest.purs","end":[34,59]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"AllowedMethodsHandler","moduleName":"Erl.Cowboy.Handlers.Rest","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Handlers","Rest"],"RestHandler"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"TypeVar","contents":"s"}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"Handler for allowed_methods callback\n"}],"tag":"SearchResult"}]],["allowedmissingposthandler",[{"values":[{"sourceSpan":{"start":[37,1],"name":".spago/erl-cowboy/v0.11.0/src/Erl/Cowboy/Handlers/Rest.purs","end":[37,57]},"score":0,"packageInfo":{"values":["erl-cowboy"],"tag":"Package"},"name":"AllowedMissingPostHandler","moduleName":"Erl.Cowboy.Handlers.Rest","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Handlers","Rest"],"RestHandler"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeVar","contents":"s"}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"Handler for allow_missing_post callback\n"}],"tag":"SearchResult"}]],["allowmissingpost",[{"values":[{"sourceSpan":{"start":[92,1],"name":".spago/erl-stetson/v0.13.0/src/Stetson/Rest.purs","end":[92,146]},"score":0,"packageInfo":{"values":["erl-stetson"],"tag":"Package"},"name":"allowMissingPost","moduleName":"Stetson.Rest","info":{"values":[{"type":{"tag":"ForAll","contents":["msg",{"tag":"ForAll","contents":["state",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Erl","Cowboy","Req"],"Req"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"RestResult"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeVar","contents":"state"}]}}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"StetsonHandler"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Stetson","Types"],"StetsonHandler"]},{"tag":"TypeVar","contents":"msg"}]},{"tag":"TypeVar","contents":"state"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Add a allowMissingPost callback to the provided StetsonHandler\n"}],"tag":"SearchResult"}]],["allwithindex",[{"values":[{"sourceSpan":{"start":[294,1],"name":".spago/foldable-traversable/v5.0.1-erl1/src/Data/FoldableWithIndex.purs","end":[300,7]},"score":20,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"allWithIndex","moduleName":"Data.FoldableWithIndex","info":{"values":[{"type":{"tag":"ForAll","contents":["i",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","FoldableWithIndex"],"FoldableWithIndex"],"constraintArgs":[{"tag":"TypeVar","contents":"i"},{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`allWithIndex f` is the same as `and <<< mapWithIndex f`; map a function over the\nstructure, and then get the conjunction of the results.\n"}],"tag":"SearchResult"}]],["alpha",[{"values":[{"sourceSpan":{"start":[62,1],"name":".spago/uri/v8.0.1/src/URI/Common.purs","end":[62,27]},"score":0,"packageInfo":{"values":["uri"],"tag":"Package"},"name":"alpha","moduleName":"URI.Common","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parser for ascii alphabetical characters (upper and lowercase).\n"}],"tag":"SearchResult"}]],["alphanum",[{"values":[{"sourceSpan":{"start":[817,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Token.purs","end":[817,56]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"alphaNum","moduleName":"Text.Parsing.Parser.Token","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an alphabetical or numerical character.\nMatches any char that satisfies `Data.CodePoint.Unicode.isAlphaNum`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/uri/v8.0.1/src/URI/Common.purs","end":[66,30]},"score":0,"packageInfo":{"values":["uri"],"tag":"Package"},"name":"alphaNum","moduleName":"URI.Common","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Parser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parser for ascii alphanumeric characters (upper and lowercase for letters).\n"}],"tag":"SearchResult"}]],["alreadystarted",[{"values":[{"sourceSpan":{"start":[93,3],"name":".spago/erl-pinto/v0.2.0/src/Pinto/Types.purs","end":[93,19]},"score":0,"packageInfo":{"values":["erl-pinto"],"tag":"Package"},"name":"AlreadyStarted","moduleName":"Pinto.Types","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"serverProcess"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alt",[{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/control/v5.0.0-erl1/src/Control/Alt.purs","end":[37,37]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Alt","moduleName":"Control.Alt","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Alt` type class identifies an associative operation on a type\nconstructor.  It is similar to `Semigroup`, except that it applies to\ntypes of kind `* -> *`, like `Array` or `List`, rather than concrete types\n`String` or `Number`.\n\n`Alt` instances are required to satisfy the following laws:\n\n- Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`\n- Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`\n\nFor example, the `Array` (`[]`) type is an instance of `Alt`, where\n`(<|>)` is defined to be concatenation.\n\nA common use case is to select the first \"valid\" item, or, if all items\nare \"invalid\", the last \"invalid\" item.\n\nFor example:\n\n```purescript\nimport Control.Alt ((<|>))\nimport Data.Maybe (Maybe(..)\nimport Data.Either (Either(..))\n\nNothing <|> Just 1 <|> Just 2 == Just 1\nLeft \"err\" <|> Right 1 <|> Right 2 == Right 1\nLeft \"err 1\" <|> Left \"err 2\" <|> Left \"err 3\" == Left \"err 3\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[37,3],"name":".spago/control/v5.0.0-erl1/src/Control/Alt.purs","end":[37,37]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"alt","moduleName":"Control.Alt","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Control","Alt"],"Alt"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[68,3],"name":".spago/routing-duplex/v0.5.0/src/Routing/Duplex/Parser.purs","end":[68,8]},"score":0,"packageInfo":{"values":["routing-duplex"],"tag":"Package"},"name":"Alt","moduleName":"Routing.Duplex.Parser","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Routing","Duplex","Parser"],"RouteParser"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alter",[{"values":[{"sourceSpan":{"start":[562,1],"name":".spago/ordered-collections/v2.0.2-erl1/src/Data/Map/Internal.purs","end":[562,78]},"score":5,"packageInfo":{"values":["ordered-collections"],"tag":"Package"},"name":"alter","moduleName":"Data.Map.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Insert the value, delete a value, or update a value for a key in a map\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[112,1],"name":".spago/erl-maps/v0.5.0/src/Erl/Data/Map.purs","end":[112,69]},"score":0,"packageInfo":{"values":["erl-maps"],"tag":"Package"},"name":"alter","moduleName":"Erl.Data.Map","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Insert the value, delete a value, or update a value for a key in a map\n"}],"tag":"SearchResult"}]],["alterat",[{"values":[{"sourceSpan":{"start":[306,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array/NonEmpty.purs","end":[306,81]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"alterAt","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[585,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[585,73]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"alterAt","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update or delete the element at the specified index by applying a\nfunction to the current value, returning a new array or `Nothing` if the\nindex is out-of-bounds.\n\n```purescript\nalterAt 1 (stripSuffix $ Pattern \"!\") [\"Hello\", \"World!\"]\n   = Just [\"Hello\", \"World\"]\n\nalterAt 1 (stripSuffix $ Pattern \"!!!!!\") [\"Hello\", \"World!\"]\n   = Just [\"Hello\"]\n\nalterAt 10 (stripSuffix $ Pattern \"!\") [\"Hello\", \"World!\"] = Nothing\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[378,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[378,63]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"alterAt","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update or delete the element at the specified index by applying a\nfunction to the current value, returning a new list, or return the\noriginal list unchanged if the index is out-of-bounds.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[354,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[354,71]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"alterAt","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update or delete the element at the specified index by applying a\nfunction to the current value, returning a new list or `Nothing` if the\nindex is out-of-bounds.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[291,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List.purs","end":[291,71]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"alterAt","moduleName":"Erl.Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Update or delete the element at the specified index by applying a\nfunction to the current value, returning a new list or `Nothing` if the\nindex is out-of-bounds.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"}]],["alterextension",[{"values":[{"sourceSpan":{"start":[86,1],"name":".spago/pathy/v8.1.0-erl1/src/Pathy/Name.purs","end":[90,12]},"score":0,"packageInfo":{"values":["pathy"],"tag":"Package"},"name":"alterExtension","moduleName":"Pathy.Name","info":{"values":[{"type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Alters an extension of a name. This allows extensions to be added, removed,\nor modified. see [`splitName`](#v:splitName) and [`joinName`](#v:joinName)\nfor how a `Name` is split into name and extention part and joined back\ninto a `Name`.\n\nAlso for any `Name` this property holds:\n```purescript\nalterExtension id = id\n````\n"}],"tag":"SearchResult"}]],["alterm",[{"values":[{"sourceSpan":{"start":[117,1],"name":".spago/erl-maps/v0.5.0/src/Erl/Data/Map.purs","end":[117,93]},"score":0,"packageInfo":{"values":["erl-maps"],"tag":"Package"},"name":"alterM","moduleName":"Erl.Data.Map","info":{"values":[{"type":{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Erl","Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}}]}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alternate",[{"values":[{"sourceSpan":{"start":[19,1],"name":".spago/control/v5.0.0-erl1/src/Data/Monoid/Alternate.purs","end":[19,40]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Alternate","moduleName":"Data.Monoid.Alternate","info":{"values":[{"typeArguments":[["f",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"Monoid and semigroup instances corresponding to `Plus` and `Alt` instances\nfor `f`\n\n``` purescript\nAlternate fx <> Alternate fy == Alternate (fx <|> fy)\nmempty :: Alternate _ == Alternate empty\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[19,23],"name":".spago/control/v5.0.0-erl1/src/Data/Monoid/Alternate.purs","end":[19,40]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Alternate","moduleName":"Data.Monoid.Alternate","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["alternative",[{"values":[{"sourceSpan":{"start":[27,1],"name":".spago/control/v5.0.0-erl1/src/Control/Alternative.purs","end":[27,47]},"score":23,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Alternative","moduleName":"Control.Alternative","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Alternative` type class has no members of its own; it just specifies\nthat the type constructor has both `Applicative` and `Plus` instances.\n\nTypes which have `Alternative` instances should also satisfy the following\nlaws:\n\n- Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`\n- Annihilation: `empty <*> f = empty`\n"}],"tag":"SearchResult"}]],["_nameaddress",[{"values":[{"sourceSpan":{"start":[67,1],"name":".spago/uri/v8.0.1/src/URI/Host.purs","end":[67,35]},"score":0,"packageInfo":{"values":["uri"],"tag":"Package"},"name":"_NameAddress","moduleName":"URI.Host","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Prism'"]},{"tag":"TypeConstructor","contents":[["URI","Host"],"Host"]}]},{"tag":"TypeConstructor","contents":[["URI","Host","RegName"],"RegName"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A prism for the `NameAddress` constructor.\n"}],"tag":"SearchResult"}]],["_newtype",[{"values":[{"sourceSpan":{"start":[11,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Iso/Newtype.purs","end":[11,70]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"_Newtype","moduleName":"Data.Lens.Iso.Newtype","info":{"values":[{"type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Iso"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"An Iso between a newtype and its inner type. This is a specialization of\n`coerced` restricted to newtypes. Supports switching between different\ntypes that have instances of the Newtype type class.\nIf you don't need to change types, you may have a better experience with\ntype inference if you use `simple _Newtype`.\n"}],"tag":"SearchResult"}]],["_nothing",[{"values":[{"sourceSpan":{"start":[10,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Prism/Maybe.purs","end":[10,60]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"_Nothing","moduleName":"Data.Lens.Prism.Maybe","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Prism"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Prism for the `Nothing` constructor of `Maybe`.\n"}],"tag":"SearchResult"}]],["<-/>",[{"values":[{"sourceSpan":{"start":[192,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[192,29]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"(<-/>)","moduleName":"Text.Parsing.Indent","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]]]
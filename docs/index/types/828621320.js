// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["828621320"] = [{"values":[{"sourceSpan":{"start":[172,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[172,45]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"checkIndent","moduleName":"Text.Parsing.Indent","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Indent"],"IndentParser"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Ensures the current indentation level matches that of the reference\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[141,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[141,48]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"sameOrIndented","moduleName":"Text.Parsing.Indent","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Indent"],"IndentParser"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parses only when indented past the level of the reference or on the same line\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[145,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[145,42]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"sameLine","moduleName":"Text.Parsing.Indent","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Indent"],"IndentParser"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parses only on the same line as the reference\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[134,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[134,43]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"indented'","moduleName":"Text.Parsing.Indent","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Indent"],"IndentParser"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Same as `indented`, but does not change internal state\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[125,1],"name":".spago/parsing/v6.0.2-erl1/src/Text/Parsing/Parser/Indent.purs","end":[125,42]},"score":2,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"indented","moduleName":"Text.Parsing.Indent","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","Indent"],"IndentParser"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parses only when indented past the level of the reference\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[111,1],"name":".spago/erl-lists/v4.0.1/src/Erl/Data/List/NonEmpty.purs","end":[111,60]},"score":0,"packageInfo":{"values":["erl-lists"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Erl.Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Erl","Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[346,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence.purs","end":[346,64]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.Sequence","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"f"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n), but depends on the Unfoldable instance. Turn a `Seq` into\nany `Unfoldable`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[341,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence.purs","end":[341,49]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"fromFoldable","moduleName":"Data.Sequence","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n*log(n)), but depends on the Foldable instance. Turn any\n`Foldable` into a `Seq`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[231,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/Ordered.purs","end":[231,67]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.Sequence.Ordered","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","Sequence","Ordered"],"OrdSeq"]},{"tag":"TypeVar","contents":"f"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n), but depends on the Unfoldable instance. Unfold an ordered\nsequence in ascending order.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[175,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/NonEmpty.purs","end":[175,66]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"toUnfoldable1","moduleName":"Data.Sequence.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable1"],"Unfoldable1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","Sequence","NonEmpty"],"Seq"]},{"tag":"TypeVar","contents":"f"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n), but depends on the Unfoldable instance. Turn a `Seq` into\nany `Unfoldable1`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[170,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/NonEmpty.purs","end":[170,64]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.Sequence.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","Sequence","NonEmpty"],"Seq"]},{"tag":"TypeVar","contents":"f"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n), but depends on the Unfoldable instance. Turn a `Seq` into\nany `Unfoldable`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[193,1],"name":".spago/sequences/v3.0.2/src/Data/Sequence/NonEmpty.purs","end":[193,51]},"score":0,"packageInfo":{"values":["sequences"],"tag":"Package"},"name":"fromFoldable1","moduleName":"Data.Sequence.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup","Foldable"],"Foldable1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Sequence","NonEmpty"],"Seq"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Probably O(n), but depends on the Foldable1 instance. Unfold a non-empty\nsequence from any Foldable1.\n\nNote that we cannot provide a `fromFoldable`, because the argument could\nbe empty.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[131,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[131,50]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"fromFoldable","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Construct a list from a foldable structure.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[125,1],"name":".spago/lists/v6.0.1/src/Data/List.purs","end":[125,52]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.List","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert a list into any unfoldable structure.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[119,1],"name":".spago/lists/v6.0.1/src/Data/List/NonEmpty.purs","end":[119,60]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[128,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[128,50]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"fromFoldable","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Construct a list from a foldable structure.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[122,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy.purs","end":[122,52]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert a list into any unfoldable structure.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[32,1],"name":".spago/lists/v6.0.1/src/Data/List/Lazy/NonEmpty.purs","end":[32,60]},"score":13,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[8,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Lens/Void.purs","end":[8,33]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"devoid","moduleName":"Data.Lens.Lens.Void","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Lens'"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"There is everything in `Void`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[14,1],"name":".spago/profunctor-lenses/v8.0.0-erl1/src/Data/Lens/Lens/Unit.purs","end":[14,33]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"united","moduleName":"Data.Lens.Lens.Unit","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Lens'"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"There is a `Unit` in everything.\n```purescript\n> view united [1,2,3]\nunit\n> over united (\\a -> a :: Unit) [1,2,3]\n[1 2 3]\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[132,1],"name":".spago/catenable-lists/v6.0.1/src/Data/CatList.purs","end":[132,53]},"score":2,"packageInfo":{"values":["catenable-lists"],"tag":"Package"},"name":"fromFoldable","moduleName":"Data.CatList","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","CatList"],"CatList"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert any `Foldable` into a `CatList`.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[152,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[152,53]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"toUnfoldable","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"f"}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert an `Array` into an `Unfoldable` structure.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[167,1],"name":".spago/arrays/v6.0.0-erl1/src/Data/Array.purs","end":[167,51]},"score":14,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"fromFoldable","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Convert a `Foldable` structure into an `Array`.\n\n```purescript\nfromFoldable (Just 1) = [1]\nfromFoldable (Nothing) = []\n```\n\n"}],"tag":"SearchResult"}]